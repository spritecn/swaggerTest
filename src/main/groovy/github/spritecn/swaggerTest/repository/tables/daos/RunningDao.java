/*
 * This file is generated by jOOQ.
 */
package github.spritecn.swaggerTest.repository.tables.daos;


import github.spritecn.swaggerTest.repository.tables.Running;
import github.spritecn.swaggerTest.repository.tables.pojos.RunningEntity;
import github.spritecn.swaggerTest.repository.tables.records.RunningRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RunningDao extends DAOImpl<RunningRecord, RunningEntity, Integer> {

    /**
     * Create a new RunningDao without any configuration
     */
    public RunningDao() {
        super(Running.RUNNING, RunningEntity.class);
    }

    /**
     * Create a new RunningDao with an attached configuration
     */
    public RunningDao(Configuration configuration) {
        super(Running.RUNNING, RunningEntity.class, configuration);
    }

    @Override
    public Integer getId(RunningEntity object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<RunningEntity> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Running.RUNNING.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<RunningEntity> fetchById(Integer... values) {
        return fetch(Running.RUNNING.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public RunningEntity fetchOneById(Integer value) {
        return fetchOne(Running.RUNNING.ID, value);
    }

    /**
     * Fetch records that have <code>last_update_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<RunningEntity> fetchRangeOfLastUpdateTime(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Running.RUNNING.LAST_UPDATE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_update_time IN (values)</code>
     */
    public List<RunningEntity> fetchByLastUpdateTime(Long... values) {
        return fetch(Running.RUNNING.LAST_UPDATE_TIME, values);
    }

    /**
     * Fetch records that have <code>group_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<RunningEntity> fetchRangeOfGroupId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Running.RUNNING.GROUP_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>group_id IN (values)</code>
     */
    public List<RunningEntity> fetchByGroupId(Integer... values) {
        return fetch(Running.RUNNING.GROUP_ID, values);
    }

    /**
     * Fetch records that have <code>fail_count BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<RunningEntity> fetchRangeOfFailCount(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Running.RUNNING.FAIL_COUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>fail_count IN (values)</code>
     */
    public List<RunningEntity> fetchByFailCount(Integer... values) {
        return fetch(Running.RUNNING.FAIL_COUNT, values);
    }

    /**
     * Fetch records that have <code>pass_count BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<RunningEntity> fetchRangeOfPassCount(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Running.RUNNING.PASS_COUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>pass_count IN (values)</code>
     */
    public List<RunningEntity> fetchByPassCount(Integer... values) {
        return fetch(Running.RUNNING.PASS_COUNT, values);
    }

    /**
     * Fetch records that have <code>start_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<RunningEntity> fetchRangeOfStartTime(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Running.RUNNING.START_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>start_time IN (values)</code>
     */
    public List<RunningEntity> fetchByStartTime(Long... values) {
        return fetch(Running.RUNNING.START_TIME, values);
    }

    /**
     * Fetch records that have <code>end_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<RunningEntity> fetchRangeOfEndTime(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Running.RUNNING.END_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>end_time IN (values)</code>
     */
    public List<RunningEntity> fetchByEndTime(Long... values) {
        return fetch(Running.RUNNING.END_TIME, values);
    }
}
