/*
 * This file is generated by jOOQ.
 */
package github.spritecn.swaggerTest.repository.tables.daos;


import github.spritecn.swaggerTest.repository.tables.TaskGroup;
import github.spritecn.swaggerTest.repository.tables.pojos.TaskGroupEntity;
import github.spritecn.swaggerTest.repository.tables.records.TaskGroupRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskGroupDao extends DAOImpl<TaskGroupRecord, TaskGroupEntity, Integer> {

    /**
     * Create a new TaskGroupDao without any configuration
     */
    public TaskGroupDao() {
        super(TaskGroup.TASK_GROUP, TaskGroupEntity.class);
    }

    /**
     * Create a new TaskGroupDao with an attached configuration
     */
    public TaskGroupDao(Configuration configuration) {
        super(TaskGroup.TASK_GROUP, TaskGroupEntity.class, configuration);
    }

    @Override
    public Integer getId(TaskGroupEntity object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<TaskGroupEntity> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(TaskGroup.TASK_GROUP.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<TaskGroupEntity> fetchById(Integer... values) {
        return fetch(TaskGroup.TASK_GROUP.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public TaskGroupEntity fetchOneById(Integer value) {
        return fetchOne(TaskGroup.TASK_GROUP.ID, value);
    }

    /**
     * Fetch records that have <code>last_update_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<TaskGroupEntity> fetchRangeOfLastUpdateTime(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TaskGroup.TASK_GROUP.LAST_UPDATE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_update_time IN (values)</code>
     */
    public List<TaskGroupEntity> fetchByLastUpdateTime(Long... values) {
        return fetch(TaskGroup.TASK_GROUP.LAST_UPDATE_TIME, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<TaskGroupEntity> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(TaskGroup.TASK_GROUP.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<TaskGroupEntity> fetchByName(String... values) {
        return fetch(TaskGroup.TASK_GROUP.NAME, values);
    }

    /**
     * Fetch records that have <code>corn BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<TaskGroupEntity> fetchRangeOfCorn(String lowerInclusive, String upperInclusive) {
        return fetchRange(TaskGroup.TASK_GROUP.CORN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>corn IN (values)</code>
     */
    public List<TaskGroupEntity> fetchByCorn(String... values) {
        return fetch(TaskGroup.TASK_GROUP.CORN, values);
    }

    /**
     * Fetch records that have <code>next_execute_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<TaskGroupEntity> fetchRangeOfNextExecuteTime(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TaskGroup.TASK_GROUP.NEXT_EXECUTE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>next_execute_time IN (values)</code>
     */
    public List<TaskGroupEntity> fetchByNextExecuteTime(Long... values) {
        return fetch(TaskGroup.TASK_GROUP.NEXT_EXECUTE_TIME, values);
    }

    /**
     * Fetch records that have <code>report_json BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<TaskGroupEntity> fetchRangeOfReportJson(String lowerInclusive, String upperInclusive) {
        return fetchRange(TaskGroup.TASK_GROUP.REPORT_JSON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>report_json IN (values)</code>
     */
    public List<TaskGroupEntity> fetchByReportJson(String... values) {
        return fetch(TaskGroup.TASK_GROUP.REPORT_JSON, values);
    }
}
