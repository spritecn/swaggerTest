/*
 * This file is generated by jOOQ.
 */
package github.spritecn.swaggerTest.repository.tables;


import github.spritecn.swaggerTest.repository.DefaultSchema;
import github.spritecn.swaggerTest.repository.Keys;
import github.spritecn.swaggerTest.repository.tables.records.RunningRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Running extends TableImpl<RunningRecord> {

    private static final long serialVersionUID = -1463496101;

    /**
     * The reference instance of <code>running</code>
     */
    public static final Running RUNNING = new Running();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RunningRecord> getRecordType() {
        return RunningRecord.class;
    }

    /**
     * The column <code>running.id</code>.
     */
    public final TableField<RunningRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>running.last_update_time</code>.
     */
    public final TableField<RunningRecord, Long> LAST_UPDATE_TIME = createField(DSL.name("last_update_time"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>running.group_id</code>.
     */
    public final TableField<RunningRecord, Integer> GROUP_ID = createField(DSL.name("group_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>running.fail_count</code>.
     */
    public final TableField<RunningRecord, Integer> FAIL_COUNT = createField(DSL.name("fail_count"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>running.pass_count</code>.
     */
    public final TableField<RunningRecord, Integer> PASS_COUNT = createField(DSL.name("pass_count"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>running.start_time</code>.
     */
    public final TableField<RunningRecord, Long> START_TIME = createField(DSL.name("start_time"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>running.end_time</code>.
     */
    public final TableField<RunningRecord, Long> END_TIME = createField(DSL.name("end_time"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>running</code> table reference
     */
    public Running() {
        this(DSL.name("running"), null);
    }

    /**
     * Create an aliased <code>running</code> table reference
     */
    public Running(String alias) {
        this(DSL.name(alias), RUNNING);
    }

    /**
     * Create an aliased <code>running</code> table reference
     */
    public Running(Name alias) {
        this(alias, RUNNING);
    }

    private Running(Name alias, Table<RunningRecord> aliased) {
        this(alias, aliased, null);
    }

    private Running(Name alias, Table<RunningRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Running(Table<O> child, ForeignKey<O, RunningRecord> key) {
        super(child, key, RUNNING);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<RunningRecord> getPrimaryKey() {
        return Keys.PK_RUNNING;
    }

    @Override
    public List<UniqueKey<RunningRecord>> getKeys() {
        return Arrays.<UniqueKey<RunningRecord>>asList(Keys.PK_RUNNING);
    }

    @Override
    public Running as(String alias) {
        return new Running(DSL.name(alias), this);
    }

    @Override
    public Running as(Name alias) {
        return new Running(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Running rename(String name) {
        return new Running(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Running rename(Name name) {
        return new Running(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Long, Integer, Integer, Integer, Long, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
