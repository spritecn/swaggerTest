/*
 * This file is generated by jOOQ.
 */
package github.spritecn.swaggerTest.repository.tables;


import github.spritecn.swaggerTest.repository.DefaultSchema;
import github.spritecn.swaggerTest.repository.Keys;
import github.spritecn.swaggerTest.repository.tables.records.SwaggerRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Swagger extends TableImpl<SwaggerRecord> {

    private static final long serialVersionUID = -614537436;

    /**
     * The reference instance of <code>swagger</code>
     */
    public static final Swagger SWAGGER = new Swagger();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SwaggerRecord> getRecordType() {
        return SwaggerRecord.class;
    }

    /**
     * The column <code>swagger.id</code>.
     */
    public final TableField<SwaggerRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>swagger.source_url</code>.
     */
    public final TableField<SwaggerRecord, String> SOURCE_URL = createField(DSL.name("source_url"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>swagger.name</code>.
     */
    public final TableField<SwaggerRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>swagger.invalid</code>.
     */
    public final TableField<SwaggerRecord, Integer> INVALID = createField(DSL.name("invalid"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>swagger.last_update_time</code>.
     */
    public final TableField<SwaggerRecord, Integer> LAST_UPDATE_TIME = createField(DSL.name("last_update_time"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>swagger.last_fetch_time</code>.
     */
    public final TableField<SwaggerRecord, Integer> LAST_FETCH_TIME = createField(DSL.name("last_fetch_time"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>swagger.auto_fetch_interval</code>.
     */
    public final TableField<SwaggerRecord, Integer> AUTO_FETCH_INTERVAL = createField(DSL.name("auto_fetch_interval"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>swagger.base_path</code>.
     */
    public final TableField<SwaggerRecord, String> BASE_PATH = createField(DSL.name("base_path"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>swagger.host</code>.
     */
    public final TableField<SwaggerRecord, String> HOST = createField(DSL.name("host"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>swagger.schemes</code>.
     */
    public final TableField<SwaggerRecord, String> SCHEMES = createField(DSL.name("schemes"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("'http'", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * Create a <code>swagger</code> table reference
     */
    public Swagger() {
        this(DSL.name("swagger"), null);
    }

    /**
     * Create an aliased <code>swagger</code> table reference
     */
    public Swagger(String alias) {
        this(DSL.name(alias), SWAGGER);
    }

    /**
     * Create an aliased <code>swagger</code> table reference
     */
    public Swagger(Name alias) {
        this(alias, SWAGGER);
    }

    private Swagger(Name alias, Table<SwaggerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Swagger(Name alias, Table<SwaggerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Swagger(Table<O> child, ForeignKey<O, SwaggerRecord> key) {
        super(child, key, SWAGGER);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<SwaggerRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SWAGGER;
    }

    @Override
    public UniqueKey<SwaggerRecord> getPrimaryKey() {
        return Keys.PK_SWAGGER;
    }

    @Override
    public List<UniqueKey<SwaggerRecord>> getKeys() {
        return Arrays.<UniqueKey<SwaggerRecord>>asList(Keys.PK_SWAGGER);
    }

    @Override
    public Swagger as(String alias) {
        return new Swagger(DSL.name(alias), this);
    }

    @Override
    public Swagger as(Name alias) {
        return new Swagger(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Swagger rename(String name) {
        return new Swagger(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Swagger rename(Name name) {
        return new Swagger(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, String, Integer, Integer, Integer, Integer, String, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
