/*
 * This file is generated by jOOQ.
 */
package github.spritecn.swaggerTest.repository.tables;


import github.spritecn.swaggerTest.repository.DefaultSchema;
import github.spritecn.swaggerTest.repository.Keys;
import github.spritecn.swaggerTest.repository.tables.records.ConfigRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Config extends TableImpl<ConfigRecord> {

    private static final long serialVersionUID = -294569556;

    /**
     * The reference instance of <code>config</code>
     */
    public static final Config CONFIG = new Config();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConfigRecord> getRecordType() {
        return ConfigRecord.class;
    }

    /**
     * The column <code>config.id</code>.
     */
    public final TableField<ConfigRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>config.last_update_time</code>.
     */
    public final TableField<ConfigRecord, Long> LAST_UPDATE_TIME = createField(DSL.name("last_update_time"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>config.type</code>.
     */
    public final TableField<ConfigRecord, Short> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.SMALLINT.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>config.name</code>.
     */
    public final TableField<ConfigRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>config.value</code>.
     */
    public final TableField<ConfigRecord, String> VALUE = createField(DSL.name("value"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>config</code> table reference
     */
    public Config() {
        this(DSL.name("config"), null);
    }

    /**
     * Create an aliased <code>config</code> table reference
     */
    public Config(String alias) {
        this(DSL.name(alias), CONFIG);
    }

    /**
     * Create an aliased <code>config</code> table reference
     */
    public Config(Name alias) {
        this(alias, CONFIG);
    }

    private Config(Name alias, Table<ConfigRecord> aliased) {
        this(alias, aliased, null);
    }

    private Config(Name alias, Table<ConfigRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Config(Table<O> child, ForeignKey<O, ConfigRecord> key) {
        super(child, key, CONFIG);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ConfigRecord> getPrimaryKey() {
        return Keys.PK_CONFIG;
    }

    @Override
    public List<UniqueKey<ConfigRecord>> getKeys() {
        return Arrays.<UniqueKey<ConfigRecord>>asList(Keys.PK_CONFIG);
    }

    @Override
    public Config as(String alias) {
        return new Config(DSL.name(alias), this);
    }

    @Override
    public Config as(Name alias) {
        return new Config(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Config rename(String name) {
        return new Config(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Config rename(Name name) {
        return new Config(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Long, Short, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
