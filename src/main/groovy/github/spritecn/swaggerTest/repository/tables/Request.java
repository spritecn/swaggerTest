/*
 * This file is generated by jOOQ.
 */
package github.spritecn.swaggerTest.repository.tables;


import github.spritecn.swaggerTest.repository.DefaultSchema;
import github.spritecn.swaggerTest.repository.Keys;
import github.spritecn.swaggerTest.repository.tables.records.RequestRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Request extends TableImpl<RequestRecord> {

    private static final long serialVersionUID = 1210485631;

    /**
     * The reference instance of <code>request</code>
     */
    public static final Request REQUEST = new Request();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RequestRecord> getRecordType() {
        return RequestRecord.class;
    }

    /**
     * The column <code>request.id</code>.
     */
    public final TableField<RequestRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>request.last_update_time</code>.
     */
    public final TableField<RequestRecord, Long> LAST_UPDATE_TIME = createField(DSL.name("last_update_time"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>request.task_id</code>.
     */
    public final TableField<RequestRecord, Integer> TASK_ID = createField(DSL.name("task_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>request.start_time</code>.
     */
    public final TableField<RequestRecord, Long> START_TIME = createField(DSL.name("start_time"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>request.end_time</code>.
     */
    public final TableField<RequestRecord, Long> END_TIME = createField(DSL.name("end_time"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>request.request</code>.
     */
    public final TableField<RequestRecord, String> REQUEST_ = createField(DSL.name("request"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>request.response</code>.
     */
    public final TableField<RequestRecord, String> RESPONSE = createField(DSL.name("response"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>request.status_code</code>.
     */
    public final TableField<RequestRecord, Integer> STATUS_CODE = createField(DSL.name("status_code"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>request</code> table reference
     */
    public Request() {
        this(DSL.name("request"), null);
    }

    /**
     * Create an aliased <code>request</code> table reference
     */
    public Request(String alias) {
        this(DSL.name(alias), REQUEST);
    }

    /**
     * Create an aliased <code>request</code> table reference
     */
    public Request(Name alias) {
        this(alias, REQUEST);
    }

    private Request(Name alias, Table<RequestRecord> aliased) {
        this(alias, aliased, null);
    }

    private Request(Name alias, Table<RequestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Request(Table<O> child, ForeignKey<O, RequestRecord> key) {
        super(child, key, REQUEST);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<RequestRecord> getPrimaryKey() {
        return Keys.PK_REQUEST;
    }

    @Override
    public List<UniqueKey<RequestRecord>> getKeys() {
        return Arrays.<UniqueKey<RequestRecord>>asList(Keys.PK_REQUEST);
    }

    @Override
    public Request as(String alias) {
        return new Request(DSL.name(alias), this);
    }

    @Override
    public Request as(Name alias) {
        return new Request(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Request rename(String name) {
        return new Request(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Request rename(Name name) {
        return new Request(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Long, Integer, Long, Long, String, String, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
