/*
 * This file is generated by jOOQ.
 */
package github.spritecn.swaggerTest.repository.tables.records;


import github.spritecn.swaggerTest.repository.tables.Source;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SourceRecord extends UpdatableRecordImpl<SourceRecord> implements Record8<Integer, String, String, Short, Long, Long, Short, String> {

    private static final long serialVersionUID = 339521467;

    /**
     * Setter for <code>source.id</code>.
     */
    public SourceRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>source.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>source.url</code>.
     */
    public SourceRecord setUrl(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>source.url</code>.
     */
    public String getUrl() {
        return (String) get(1);
    }

    /**
     * Setter for <code>source.name</code>.
     */
    public SourceRecord setName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>source.name</code>.
     */
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>source.invalid</code>.
     */
    public SourceRecord setInvalid(Short value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>source.invalid</code>.
     */
    public Short getInvalid() {
        return (Short) get(3);
    }

    /**
     * Setter for <code>source.last_update_time</code>.
     */
    public SourceRecord setLastUpdateTime(Long value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>source.last_update_time</code>.
     */
    public Long getLastUpdateTime() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>source.last_fetch_time</code>.
     */
    public SourceRecord setLastFetchTime(Long value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>source.last_fetch_time</code>.
     */
    public Long getLastFetchTime() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>source.auto_fetch_interval</code>.
     */
    public SourceRecord setAutoFetchInterval(Short value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>source.auto_fetch_interval</code>.
     */
    public Short getAutoFetchInterval() {
        return (Short) get(6);
    }

    /**
     * Setter for <code>source.base_path</code>.
     */
    public SourceRecord setBasePath(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>source.base_path</code>.
     */
    public String getBasePath() {
        return (String) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, Short, Long, Long, Short, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Integer, String, String, Short, Long, Long, Short, String> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Source.SOURCE.ID;
    }

    @Override
    public Field<String> field2() {
        return Source.SOURCE.URL;
    }

    @Override
    public Field<String> field3() {
        return Source.SOURCE.NAME;
    }

    @Override
    public Field<Short> field4() {
        return Source.SOURCE.INVALID;
    }

    @Override
    public Field<Long> field5() {
        return Source.SOURCE.LAST_UPDATE_TIME;
    }

    @Override
    public Field<Long> field6() {
        return Source.SOURCE.LAST_FETCH_TIME;
    }

    @Override
    public Field<Short> field7() {
        return Source.SOURCE.AUTO_FETCH_INTERVAL;
    }

    @Override
    public Field<String> field8() {
        return Source.SOURCE.BASE_PATH;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getUrl();
    }

    @Override
    public String component3() {
        return getName();
    }

    @Override
    public Short component4() {
        return getInvalid();
    }

    @Override
    public Long component5() {
        return getLastUpdateTime();
    }

    @Override
    public Long component6() {
        return getLastFetchTime();
    }

    @Override
    public Short component7() {
        return getAutoFetchInterval();
    }

    @Override
    public String component8() {
        return getBasePath();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getUrl();
    }

    @Override
    public String value3() {
        return getName();
    }

    @Override
    public Short value4() {
        return getInvalid();
    }

    @Override
    public Long value5() {
        return getLastUpdateTime();
    }

    @Override
    public Long value6() {
        return getLastFetchTime();
    }

    @Override
    public Short value7() {
        return getAutoFetchInterval();
    }

    @Override
    public String value8() {
        return getBasePath();
    }

    @Override
    public SourceRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public SourceRecord value2(String value) {
        setUrl(value);
        return this;
    }

    @Override
    public SourceRecord value3(String value) {
        setName(value);
        return this;
    }

    @Override
    public SourceRecord value4(Short value) {
        setInvalid(value);
        return this;
    }

    @Override
    public SourceRecord value5(Long value) {
        setLastUpdateTime(value);
        return this;
    }

    @Override
    public SourceRecord value6(Long value) {
        setLastFetchTime(value);
        return this;
    }

    @Override
    public SourceRecord value7(Short value) {
        setAutoFetchInterval(value);
        return this;
    }

    @Override
    public SourceRecord value8(String value) {
        setBasePath(value);
        return this;
    }

    @Override
    public SourceRecord values(Integer value1, String value2, String value3, Short value4, Long value5, Long value6, Short value7, String value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SourceRecord
     */
    public SourceRecord() {
        super(Source.SOURCE);
    }

    /**
     * Create a detached, initialised SourceRecord
     */
    public SourceRecord(Integer id, String url, String name, Short invalid, Long lastUpdateTime, Long lastFetchTime, Short autoFetchInterval, String basePath) {
        super(Source.SOURCE);

        set(0, id);
        set(1, url);
        set(2, name);
        set(3, invalid);
        set(4, lastUpdateTime);
        set(5, lastFetchTime);
        set(6, autoFetchInterval);
        set(7, basePath);
    }
}
