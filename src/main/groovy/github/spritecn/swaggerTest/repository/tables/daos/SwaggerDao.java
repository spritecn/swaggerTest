/*
 * This file is generated by jOOQ.
 */
package github.spritecn.swaggerTest.repository.tables.daos;


import github.spritecn.swaggerTest.repository.tables.Swagger;
import github.spritecn.swaggerTest.repository.tables.records.SwaggerRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SwaggerDao extends DAOImpl<SwaggerRecord, github.spritecn.swaggerTest.repository.tables.pojos.Swagger, Integer> {

    /**
     * Create a new SwaggerDao without any configuration
     */
    public SwaggerDao() {
        super(Swagger.SWAGGER, github.spritecn.swaggerTest.repository.tables.pojos.Swagger.class);
    }

    /**
     * Create a new SwaggerDao with an attached configuration
     */
    public SwaggerDao(Configuration configuration) {
        super(Swagger.SWAGGER, github.spritecn.swaggerTest.repository.tables.pojos.Swagger.class, configuration);
    }

    @Override
    public Integer getId(github.spritecn.swaggerTest.repository.tables.pojos.Swagger object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<github.spritecn.swaggerTest.repository.tables.pojos.Swagger> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Swagger.SWAGGER.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<github.spritecn.swaggerTest.repository.tables.pojos.Swagger> fetchById(Integer... values) {
        return fetch(Swagger.SWAGGER.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public github.spritecn.swaggerTest.repository.tables.pojos.Swagger fetchOneById(Integer value) {
        return fetchOne(Swagger.SWAGGER.ID, value);
    }

    /**
     * Fetch records that have <code>source_url BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<github.spritecn.swaggerTest.repository.tables.pojos.Swagger> fetchRangeOfSourceUrl(String lowerInclusive, String upperInclusive) {
        return fetchRange(Swagger.SWAGGER.SOURCE_URL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>source_url IN (values)</code>
     */
    public List<github.spritecn.swaggerTest.repository.tables.pojos.Swagger> fetchBySourceUrl(String... values) {
        return fetch(Swagger.SWAGGER.SOURCE_URL, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<github.spritecn.swaggerTest.repository.tables.pojos.Swagger> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Swagger.SWAGGER.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<github.spritecn.swaggerTest.repository.tables.pojos.Swagger> fetchByName(String... values) {
        return fetch(Swagger.SWAGGER.NAME, values);
    }

    /**
     * Fetch records that have <code>invalid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<github.spritecn.swaggerTest.repository.tables.pojos.Swagger> fetchRangeOfInvalid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Swagger.SWAGGER.INVALID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>invalid IN (values)</code>
     */
    public List<github.spritecn.swaggerTest.repository.tables.pojos.Swagger> fetchByInvalid(Integer... values) {
        return fetch(Swagger.SWAGGER.INVALID, values);
    }

    /**
     * Fetch records that have <code>last_update_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<github.spritecn.swaggerTest.repository.tables.pojos.Swagger> fetchRangeOfLastUpdateTime(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Swagger.SWAGGER.LAST_UPDATE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_update_time IN (values)</code>
     */
    public List<github.spritecn.swaggerTest.repository.tables.pojos.Swagger> fetchByLastUpdateTime(Integer... values) {
        return fetch(Swagger.SWAGGER.LAST_UPDATE_TIME, values);
    }

    /**
     * Fetch records that have <code>last_fetch_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<github.spritecn.swaggerTest.repository.tables.pojos.Swagger> fetchRangeOfLastFetchTime(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Swagger.SWAGGER.LAST_FETCH_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_fetch_time IN (values)</code>
     */
    public List<github.spritecn.swaggerTest.repository.tables.pojos.Swagger> fetchByLastFetchTime(Integer... values) {
        return fetch(Swagger.SWAGGER.LAST_FETCH_TIME, values);
    }

    /**
     * Fetch records that have <code>auto_fetch_interval BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<github.spritecn.swaggerTest.repository.tables.pojos.Swagger> fetchRangeOfAutoFetchInterval(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Swagger.SWAGGER.AUTO_FETCH_INTERVAL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>auto_fetch_interval IN (values)</code>
     */
    public List<github.spritecn.swaggerTest.repository.tables.pojos.Swagger> fetchByAutoFetchInterval(Integer... values) {
        return fetch(Swagger.SWAGGER.AUTO_FETCH_INTERVAL, values);
    }

    /**
     * Fetch records that have <code>base_path BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<github.spritecn.swaggerTest.repository.tables.pojos.Swagger> fetchRangeOfBasePath(String lowerInclusive, String upperInclusive) {
        return fetchRange(Swagger.SWAGGER.BASE_PATH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>base_path IN (values)</code>
     */
    public List<github.spritecn.swaggerTest.repository.tables.pojos.Swagger> fetchByBasePath(String... values) {
        return fetch(Swagger.SWAGGER.BASE_PATH, values);
    }

    /**
     * Fetch records that have <code>host BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<github.spritecn.swaggerTest.repository.tables.pojos.Swagger> fetchRangeOfHost(String lowerInclusive, String upperInclusive) {
        return fetchRange(Swagger.SWAGGER.HOST, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>host IN (values)</code>
     */
    public List<github.spritecn.swaggerTest.repository.tables.pojos.Swagger> fetchByHost(String... values) {
        return fetch(Swagger.SWAGGER.HOST, values);
    }

    /**
     * Fetch records that have <code>schemes BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<github.spritecn.swaggerTest.repository.tables.pojos.Swagger> fetchRangeOfSchemes(String lowerInclusive, String upperInclusive) {
        return fetchRange(Swagger.SWAGGER.SCHEMES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>schemes IN (values)</code>
     */
    public List<github.spritecn.swaggerTest.repository.tables.pojos.Swagger> fetchBySchemes(String... values) {
        return fetch(Swagger.SWAGGER.SCHEMES, values);
    }
}
