/*
 * This file is generated by jOOQ.
 */
package github.spritecn.swaggerTest.repository.tables.records;


import github.spritecn.swaggerTest.repository.tables.Task;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskRecord extends UpdatableRecordImpl<TaskRecord> implements Record7<Integer, Long, String, Integer, Integer, Long, Long> {

    private static final long serialVersionUID = -1613232386;

    /**
     * Setter for <code>task.id</code>.
     */
    public TaskRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>task.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>task.last_update_time</code>.
     */
    public TaskRecord setLastUpdateTime(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>task.last_update_time</code>.
     */
    public Long getLastUpdateTime() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>task.request_body</code>.
     */
    public TaskRecord setRequestBody(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>task.request_body</code>.
     */
    public String getRequestBody() {
        return (String) get(2);
    }

    /**
     * Setter for <code>task.fail_count</code>.
     */
    public TaskRecord setFailCount(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>task.fail_count</code>.
     */
    public Integer getFailCount() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>task.pass_count</code>.
     */
    public TaskRecord setPassCount(Integer value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>task.pass_count</code>.
     */
    public Integer getPassCount() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>task.start_time</code>.
     */
    public TaskRecord setStartTime(Long value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>task.start_time</code>.
     */
    public Long getStartTime() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>task.end_time</code>.
     */
    public TaskRecord setEndTime(Long value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>task.end_time</code>.
     */
    public Long getEndTime() {
        return (Long) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Long, String, Integer, Integer, Long, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Integer, Long, String, Integer, Integer, Long, Long> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Task.TASK.ID;
    }

    @Override
    public Field<Long> field2() {
        return Task.TASK.LAST_UPDATE_TIME;
    }

    @Override
    public Field<String> field3() {
        return Task.TASK.REQUEST_BODY;
    }

    @Override
    public Field<Integer> field4() {
        return Task.TASK.FAIL_COUNT;
    }

    @Override
    public Field<Integer> field5() {
        return Task.TASK.PASS_COUNT;
    }

    @Override
    public Field<Long> field6() {
        return Task.TASK.START_TIME;
    }

    @Override
    public Field<Long> field7() {
        return Task.TASK.END_TIME;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getLastUpdateTime();
    }

    @Override
    public String component3() {
        return getRequestBody();
    }

    @Override
    public Integer component4() {
        return getFailCount();
    }

    @Override
    public Integer component5() {
        return getPassCount();
    }

    @Override
    public Long component6() {
        return getStartTime();
    }

    @Override
    public Long component7() {
        return getEndTime();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getLastUpdateTime();
    }

    @Override
    public String value3() {
        return getRequestBody();
    }

    @Override
    public Integer value4() {
        return getFailCount();
    }

    @Override
    public Integer value5() {
        return getPassCount();
    }

    @Override
    public Long value6() {
        return getStartTime();
    }

    @Override
    public Long value7() {
        return getEndTime();
    }

    @Override
    public TaskRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public TaskRecord value2(Long value) {
        setLastUpdateTime(value);
        return this;
    }

    @Override
    public TaskRecord value3(String value) {
        setRequestBody(value);
        return this;
    }

    @Override
    public TaskRecord value4(Integer value) {
        setFailCount(value);
        return this;
    }

    @Override
    public TaskRecord value5(Integer value) {
        setPassCount(value);
        return this;
    }

    @Override
    public TaskRecord value6(Long value) {
        setStartTime(value);
        return this;
    }

    @Override
    public TaskRecord value7(Long value) {
        setEndTime(value);
        return this;
    }

    @Override
    public TaskRecord values(Integer value1, Long value2, String value3, Integer value4, Integer value5, Long value6, Long value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TaskRecord
     */
    public TaskRecord() {
        super(Task.TASK);
    }

    /**
     * Create a detached, initialised TaskRecord
     */
    public TaskRecord(Integer id, Long lastUpdateTime, String requestBody, Integer failCount, Integer passCount, Long startTime, Long endTime) {
        super(Task.TASK);

        set(0, id);
        set(1, lastUpdateTime);
        set(2, requestBody);
        set(3, failCount);
        set(4, passCount);
        set(5, startTime);
        set(6, endTime);
    }
}
