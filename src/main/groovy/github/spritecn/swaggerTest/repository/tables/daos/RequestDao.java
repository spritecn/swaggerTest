/*
 * This file is generated by jOOQ.
 */
package github.spritecn.swaggerTest.repository.tables.daos;


import github.spritecn.swaggerTest.repository.tables.Request;
import github.spritecn.swaggerTest.repository.tables.pojos.RequestEntity;
import github.spritecn.swaggerTest.repository.tables.records.RequestRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RequestDao extends DAOImpl<RequestRecord, RequestEntity, Integer> {

    /**
     * Create a new RequestDao without any configuration
     */
    public RequestDao() {
        super(Request.REQUEST, RequestEntity.class);
    }

    /**
     * Create a new RequestDao with an attached configuration
     */
    public RequestDao(Configuration configuration) {
        super(Request.REQUEST, RequestEntity.class, configuration);
    }

    @Override
    public Integer getId(RequestEntity object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<RequestEntity> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Request.REQUEST.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<RequestEntity> fetchById(Integer... values) {
        return fetch(Request.REQUEST.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public RequestEntity fetchOneById(Integer value) {
        return fetchOne(Request.REQUEST.ID, value);
    }

    /**
     * Fetch records that have <code>last_update_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<RequestEntity> fetchRangeOfLastUpdateTime(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Request.REQUEST.LAST_UPDATE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_update_time IN (values)</code>
     */
    public List<RequestEntity> fetchByLastUpdateTime(Long... values) {
        return fetch(Request.REQUEST.LAST_UPDATE_TIME, values);
    }

    /**
     * Fetch records that have <code>task_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<RequestEntity> fetchRangeOfTaskId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Request.REQUEST.TASK_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>task_id IN (values)</code>
     */
    public List<RequestEntity> fetchByTaskId(Integer... values) {
        return fetch(Request.REQUEST.TASK_ID, values);
    }

    /**
     * Fetch records that have <code>start_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<RequestEntity> fetchRangeOfStartTime(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Request.REQUEST.START_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>start_time IN (values)</code>
     */
    public List<RequestEntity> fetchByStartTime(Long... values) {
        return fetch(Request.REQUEST.START_TIME, values);
    }

    /**
     * Fetch records that have <code>end_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<RequestEntity> fetchRangeOfEndTime(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Request.REQUEST.END_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>end_time IN (values)</code>
     */
    public List<RequestEntity> fetchByEndTime(Long... values) {
        return fetch(Request.REQUEST.END_TIME, values);
    }

    /**
     * Fetch records that have <code>request BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<RequestEntity> fetchRangeOfRequest(String lowerInclusive, String upperInclusive) {
        return fetchRange(Request.REQUEST.REQUEST_, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>request IN (values)</code>
     */
    public List<RequestEntity> fetchByRequest(String... values) {
        return fetch(Request.REQUEST.REQUEST_, values);
    }

    /**
     * Fetch records that have <code>response BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<RequestEntity> fetchRangeOfResponse(String lowerInclusive, String upperInclusive) {
        return fetchRange(Request.REQUEST.RESPONSE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>response IN (values)</code>
     */
    public List<RequestEntity> fetchByResponse(String... values) {
        return fetch(Request.REQUEST.RESPONSE, values);
    }

    /**
     * Fetch records that have <code>status_code BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<RequestEntity> fetchRangeOfStatusCode(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Request.REQUEST.STATUS_CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status_code IN (values)</code>
     */
    public List<RequestEntity> fetchByStatusCode(Integer... values) {
        return fetch(Request.REQUEST.STATUS_CODE, values);
    }
}
