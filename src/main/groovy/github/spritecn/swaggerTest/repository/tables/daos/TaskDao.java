/*
 * This file is generated by jOOQ.
 */
package github.spritecn.swaggerTest.repository.tables.daos;


import github.spritecn.swaggerTest.repository.tables.Task;
import github.spritecn.swaggerTest.repository.tables.pojos.TaskEntity;
import github.spritecn.swaggerTest.repository.tables.records.TaskRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskDao extends DAOImpl<TaskRecord, TaskEntity, Integer> {

    /**
     * Create a new TaskDao without any configuration
     */
    public TaskDao() {
        super(Task.TASK, TaskEntity.class);
    }

    /**
     * Create a new TaskDao with an attached configuration
     */
    public TaskDao(Configuration configuration) {
        super(Task.TASK, TaskEntity.class, configuration);
    }

    @Override
    public Integer getId(TaskEntity object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<TaskEntity> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Task.TASK.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<TaskEntity> fetchById(Integer... values) {
        return fetch(Task.TASK.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public TaskEntity fetchOneById(Integer value) {
        return fetchOne(Task.TASK.ID, value);
    }

    /**
     * Fetch records that have <code>last_update_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<TaskEntity> fetchRangeOfLastUpdateTime(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Task.TASK.LAST_UPDATE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_update_time IN (values)</code>
     */
    public List<TaskEntity> fetchByLastUpdateTime(Long... values) {
        return fetch(Task.TASK.LAST_UPDATE_TIME, values);
    }

    /**
     * Fetch records that have <code>request_body BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<TaskEntity> fetchRangeOfRequestBody(String lowerInclusive, String upperInclusive) {
        return fetchRange(Task.TASK.REQUEST_BODY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>request_body IN (values)</code>
     */
    public List<TaskEntity> fetchByRequestBody(String... values) {
        return fetch(Task.TASK.REQUEST_BODY, values);
    }

    /**
     * Fetch records that have <code>fail_count BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<TaskEntity> fetchRangeOfFailCount(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Task.TASK.FAIL_COUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>fail_count IN (values)</code>
     */
    public List<TaskEntity> fetchByFailCount(Integer... values) {
        return fetch(Task.TASK.FAIL_COUNT, values);
    }

    /**
     * Fetch records that have <code>pass_count BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<TaskEntity> fetchRangeOfPassCount(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Task.TASK.PASS_COUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>pass_count IN (values)</code>
     */
    public List<TaskEntity> fetchByPassCount(Integer... values) {
        return fetch(Task.TASK.PASS_COUNT, values);
    }

    /**
     * Fetch records that have <code>start_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<TaskEntity> fetchRangeOfStartTime(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Task.TASK.START_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>start_time IN (values)</code>
     */
    public List<TaskEntity> fetchByStartTime(Long... values) {
        return fetch(Task.TASK.START_TIME, values);
    }

    /**
     * Fetch records that have <code>end_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<TaskEntity> fetchRangeOfEndTime(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Task.TASK.END_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>end_time IN (values)</code>
     */
    public List<TaskEntity> fetchByEndTime(Long... values) {
        return fetch(Task.TASK.END_TIME, values);
    }
}
