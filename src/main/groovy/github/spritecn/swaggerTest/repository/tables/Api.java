/*
 * This file is generated by jOOQ.
 */
package github.spritecn.swaggerTest.repository.tables;


import github.spritecn.swaggerTest.repository.DefaultSchema;
import github.spritecn.swaggerTest.repository.Keys;
import github.spritecn.swaggerTest.repository.tables.records.ApiRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Api extends TableImpl<ApiRecord> {

    private static final long serialVersionUID = -1929104777;

    /**
     * The reference instance of <code>api</code>
     */
    public static final Api API = new Api();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApiRecord> getRecordType() {
        return ApiRecord.class;
    }

    /**
     * The column <code>api.id</code>.
     */
    public final TableField<ApiRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>api.last_update_time</code>.
     */
    public final TableField<ApiRecord, Long> LAST_UPDATE_TIME = createField(DSL.name("last_update_time"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>api.source_id</code>.
     */
    public final TableField<ApiRecord, Integer> SOURCE_ID = createField(DSL.name("source_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>api.url</code>.
     */
    public final TableField<ApiRecord, String> URL = createField(DSL.name("url"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>api.tags</code>.
     */
    public final TableField<ApiRecord, String> TAGS = createField(DSL.name("tags"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>api.method</code>.
     */
    public final TableField<ApiRecord, Short> METHOD = createField(DSL.name("method"), org.jooq.impl.SQLDataType.SMALLINT.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>api.request_type</code>.
     */
    public final TableField<ApiRecord, Short> REQUEST_TYPE = createField(DSL.name("request_type"), org.jooq.impl.SQLDataType.SMALLINT.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>api.response_type</code>.
     */
    public final TableField<ApiRecord, Short> RESPONSE_TYPE = createField(DSL.name("response_type"), org.jooq.impl.SQLDataType.SMALLINT.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>api.request_template</code>.
     */
    public final TableField<ApiRecord, String> REQUEST_TEMPLATE = createField(DSL.name("request_template"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>api</code> table reference
     */
    public Api() {
        this(DSL.name("api"), null);
    }

    /**
     * Create an aliased <code>api</code> table reference
     */
    public Api(String alias) {
        this(DSL.name(alias), API);
    }

    /**
     * Create an aliased <code>api</code> table reference
     */
    public Api(Name alias) {
        this(alias, API);
    }

    private Api(Name alias, Table<ApiRecord> aliased) {
        this(alias, aliased, null);
    }

    private Api(Name alias, Table<ApiRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Api(Table<O> child, ForeignKey<O, ApiRecord> key) {
        super(child, key, API);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ApiRecord> getPrimaryKey() {
        return Keys.PK_API;
    }

    @Override
    public List<UniqueKey<ApiRecord>> getKeys() {
        return Arrays.<UniqueKey<ApiRecord>>asList(Keys.PK_API);
    }

    @Override
    public Api as(String alias) {
        return new Api(DSL.name(alias), this);
    }

    @Override
    public Api as(Name alias) {
        return new Api(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Api rename(String name) {
        return new Api(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Api rename(Name name) {
        return new Api(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, Long, Integer, String, String, Short, Short, Short, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
