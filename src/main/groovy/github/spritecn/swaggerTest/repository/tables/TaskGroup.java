/*
 * This file is generated by jOOQ.
 */
package github.spritecn.swaggerTest.repository.tables;


import github.spritecn.swaggerTest.repository.DefaultSchema;
import github.spritecn.swaggerTest.repository.Keys;
import github.spritecn.swaggerTest.repository.tables.records.TaskGroupRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskGroup extends TableImpl<TaskGroupRecord> {

    private static final long serialVersionUID = 1621512739;

    /**
     * The reference instance of <code>task_group</code>
     */
    public static final TaskGroup TASK_GROUP = new TaskGroup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskGroupRecord> getRecordType() {
        return TaskGroupRecord.class;
    }

    /**
     * The column <code>task_group.id</code>.
     */
    public final TableField<TaskGroupRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>task_group.last_update_time</code>.
     */
    public final TableField<TaskGroupRecord, Long> LAST_UPDATE_TIME = createField(DSL.name("last_update_time"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>task_group.name</code>.
     */
    public final TableField<TaskGroupRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>task_group.corn</code>.
     */
    public final TableField<TaskGroupRecord, String> CORN = createField(DSL.name("corn"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>task_group.next_execute_time</code>.
     */
    public final TableField<TaskGroupRecord, Long> NEXT_EXECUTE_TIME = createField(DSL.name("next_execute_time"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>task_group.report_json</code>.
     */
    public final TableField<TaskGroupRecord, String> REPORT_JSON = createField(DSL.name("report_json"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>task_group</code> table reference
     */
    public TaskGroup() {
        this(DSL.name("task_group"), null);
    }

    /**
     * Create an aliased <code>task_group</code> table reference
     */
    public TaskGroup(String alias) {
        this(DSL.name(alias), TASK_GROUP);
    }

    /**
     * Create an aliased <code>task_group</code> table reference
     */
    public TaskGroup(Name alias) {
        this(alias, TASK_GROUP);
    }

    private TaskGroup(Name alias, Table<TaskGroupRecord> aliased) {
        this(alias, aliased, null);
    }

    private TaskGroup(Name alias, Table<TaskGroupRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> TaskGroup(Table<O> child, ForeignKey<O, TaskGroupRecord> key) {
        super(child, key, TASK_GROUP);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<TaskGroupRecord> getPrimaryKey() {
        return Keys.PK_TASK_GROUP;
    }

    @Override
    public List<UniqueKey<TaskGroupRecord>> getKeys() {
        return Arrays.<UniqueKey<TaskGroupRecord>>asList(Keys.PK_TASK_GROUP);
    }

    @Override
    public TaskGroup as(String alias) {
        return new TaskGroup(DSL.name(alias), this);
    }

    @Override
    public TaskGroup as(Name alias) {
        return new TaskGroup(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskGroup rename(String name) {
        return new TaskGroup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskGroup rename(Name name) {
        return new TaskGroup(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Long, String, String, Long, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
