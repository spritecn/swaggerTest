/*
 * This file is generated by jOOQ.
 */
package github.spritecn.swaggerTest.repository;


import github.spritecn.swaggerTest.repository.tables.Api;
import github.spritecn.swaggerTest.repository.tables.Config;
import github.spritecn.swaggerTest.repository.tables.Request;
import github.spritecn.swaggerTest.repository.tables.Running;
import github.spritecn.swaggerTest.repository.tables.Source;
import github.spritecn.swaggerTest.repository.tables.Task;
import github.spritecn.swaggerTest.repository.tables.TaskGroup;
import github.spritecn.swaggerTest.repository.tables.records.ApiRecord;
import github.spritecn.swaggerTest.repository.tables.records.ConfigRecord;
import github.spritecn.swaggerTest.repository.tables.records.RequestRecord;
import github.spritecn.swaggerTest.repository.tables.records.RunningRecord;
import github.spritecn.swaggerTest.repository.tables.records.SourceRecord;
import github.spritecn.swaggerTest.repository.tables.records.TaskGroupRecord;
import github.spritecn.swaggerTest.repository.tables.records.TaskRecord;

import org.jooq.Identity;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code></code> schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<SourceRecord, Integer> IDENTITY_SOURCE = Identities0.IDENTITY_SOURCE;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ApiRecord> PK_API = UniqueKeys0.PK_API;
    public static final UniqueKey<ConfigRecord> PK_CONFIG = UniqueKeys0.PK_CONFIG;
    public static final UniqueKey<RequestRecord> PK_REQUEST = UniqueKeys0.PK_REQUEST;
    public static final UniqueKey<RunningRecord> PK_RUNNING = UniqueKeys0.PK_RUNNING;
    public static final UniqueKey<SourceRecord> PK_SOURCE = UniqueKeys0.PK_SOURCE;
    public static final UniqueKey<TaskRecord> PK_TASK = UniqueKeys0.PK_TASK;
    public static final UniqueKey<TaskGroupRecord> PK_TASK_GROUP = UniqueKeys0.PK_TASK_GROUP;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<SourceRecord, Integer> IDENTITY_SOURCE = Internal.createIdentity(Source.SOURCE, Source.SOURCE.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<ApiRecord> PK_API = Internal.createUniqueKey(Api.API, "pk_api", new TableField[] { Api.API.ID }, true);
        public static final UniqueKey<ConfigRecord> PK_CONFIG = Internal.createUniqueKey(Config.CONFIG, "pk_config", new TableField[] { Config.CONFIG.ID }, true);
        public static final UniqueKey<RequestRecord> PK_REQUEST = Internal.createUniqueKey(Request.REQUEST, "pk_request", new TableField[] { Request.REQUEST.ID }, true);
        public static final UniqueKey<RunningRecord> PK_RUNNING = Internal.createUniqueKey(Running.RUNNING, "pk_running", new TableField[] { Running.RUNNING.ID }, true);
        public static final UniqueKey<SourceRecord> PK_SOURCE = Internal.createUniqueKey(Source.SOURCE, "pk_source", new TableField[] { Source.SOURCE.ID }, true);
        public static final UniqueKey<TaskRecord> PK_TASK = Internal.createUniqueKey(Task.TASK, "pk_task", new TableField[] { Task.TASK.ID }, true);
        public static final UniqueKey<TaskGroupRecord> PK_TASK_GROUP = Internal.createUniqueKey(TaskGroup.TASK_GROUP, "pk_task_group", new TableField[] { TaskGroup.TASK_GROUP.ID }, true);
    }
}
