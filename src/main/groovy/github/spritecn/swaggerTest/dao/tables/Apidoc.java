/*
 * This file is generated by jOOQ.
 */
package github.spritecn.swaggerTest.dao.tables;


import github.spritecn.swaggerTest.dao.DefaultSchema;
import github.spritecn.swaggerTest.dao.Keys;
import github.spritecn.swaggerTest.dao.tables.records.ApidocRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Apidoc extends TableImpl<ApidocRecord> {

    private static final long serialVersionUID = 916353673;

    /**
     * The reference instance of <code>apiDoc</code>
     */
    public static final Apidoc APIDOC = new Apidoc();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApidocRecord> getRecordType() {
        return ApidocRecord.class;
    }

    /**
     * The column <code>apiDoc.id</code>.
     */
    public final TableField<ApidocRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>apiDoc.sourceUrl</code>.
     */
    public final TableField<ApidocRecord, String> SOURCEURL = createField(DSL.name("sourceUrl"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>apiDoc.name</code>.
     */
    public final TableField<ApidocRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>apiDoc.invalid</code>.
     */
    public final TableField<ApidocRecord, Integer> INVALID = createField(DSL.name("invalid"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>apiDoc.lastUpdateTime</code>.
     */
    public final TableField<ApidocRecord, Integer> LASTUPDATETIME = createField(DSL.name("lastUpdateTime"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>apiDoc.lastFetchTime</code>.
     */
    public final TableField<ApidocRecord, Integer> LASTFETCHTIME = createField(DSL.name("lastFetchTime"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>apiDoc.lastFetchFailed</code>.
     */
    public final TableField<ApidocRecord, Integer> LASTFETCHFAILED = createField(DSL.name("lastFetchFailed"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>apiDoc.autoFetchInterval</code>.
     */
    public final TableField<ApidocRecord, Integer> AUTOFETCHINTERVAL = createField(DSL.name("autoFetchInterval"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>apiDoc.basePath</code>.
     */
    public final TableField<ApidocRecord, String> BASEPATH = createField(DSL.name("basePath"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>apiDoc.host</code>.
     */
    public final TableField<ApidocRecord, String> HOST = createField(DSL.name("host"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>apiDoc.schemes</code>.
     */
    public final TableField<ApidocRecord, String> SCHEMES = createField(DSL.name("schemes"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("'http'", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * Create a <code>apiDoc</code> table reference
     */
    public Apidoc() {
        this(DSL.name("apiDoc"), null);
    }

    /**
     * Create an aliased <code>apiDoc</code> table reference
     */
    public Apidoc(String alias) {
        this(DSL.name(alias), APIDOC);
    }

    /**
     * Create an aliased <code>apiDoc</code> table reference
     */
    public Apidoc(Name alias) {
        this(alias, APIDOC);
    }

    private Apidoc(Name alias, Table<ApidocRecord> aliased) {
        this(alias, aliased, null);
    }

    private Apidoc(Name alias, Table<ApidocRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Apidoc(Table<O> child, ForeignKey<O, ApidocRecord> key) {
        super(child, key, APIDOC);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<ApidocRecord, Integer> getIdentity() {
        return Keys.IDENTITY_APIDOC;
    }

    @Override
    public UniqueKey<ApidocRecord> getPrimaryKey() {
        return Keys.PK_APIDOC;
    }

    @Override
    public List<UniqueKey<ApidocRecord>> getKeys() {
        return Arrays.<UniqueKey<ApidocRecord>>asList(Keys.PK_APIDOC);
    }

    @Override
    public Apidoc as(String alias) {
        return new Apidoc(DSL.name(alias), this);
    }

    @Override
    public Apidoc as(Name alias) {
        return new Apidoc(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Apidoc rename(String name) {
        return new Apidoc(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Apidoc rename(Name name) {
        return new Apidoc(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, String, String, Integer, Integer, Integer, Integer, Integer, String, String, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
